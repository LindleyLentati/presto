# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_newpresto', [dirname(__file__)])
        except ImportError:
            import _newpresto
            return _newpresto
        if fp is not None:
            try:
                _mod = imp.load_module('_newpresto', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _newpresto = swig_import_helper()
    del swig_import_helper
else:
    import _newpresto
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class fcomplex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fcomplex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fcomplex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _newpresto.fcomplex_r_set
    __swig_getmethods__["r"] = _newpresto.fcomplex_r_get
    if _newclass:r = _swig_property(_newpresto.fcomplex_r_get, _newpresto.fcomplex_r_set)
    __swig_setmethods__["i"] = _newpresto.fcomplex_i_set
    __swig_getmethods__["i"] = _newpresto.fcomplex_i_get
    if _newclass:i = _swig_property(_newpresto.fcomplex_i_get, _newpresto.fcomplex_i_set)
    def __init__(self): 
        this = _newpresto.new_fcomplex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _newpresto.delete_fcomplex
    __del__ = lambda self : None;
fcomplex_swigregister = _newpresto.fcomplex_swigregister
fcomplex_swigregister(fcomplex)

SQRT2 = _newpresto.SQRT2
PI = _newpresto.PI
TWOPI = _newpresto.TWOPI
DEGTORAD = _newpresto.DEGTORAD
RADTODEG = _newpresto.RADTODEG
PIBYTWO = _newpresto.PIBYTWO
SOL = _newpresto.SOL
SECPERJULYR = _newpresto.SECPERJULYR
SECPERDAY = _newpresto.SECPERDAY
ARCSEC2RAD = _newpresto.ARCSEC2RAD
SEC2RAD = _newpresto.SEC2RAD

def read_wisdom():
  return _newpresto.read_wisdom()
read_wisdom = _newpresto.read_wisdom

def good_factor(*args):
  return _newpresto.good_factor(*args)
good_factor = _newpresto.good_factor

def fftwcall(*args):
  return _newpresto.fftwcall(*args)
fftwcall = _newpresto.fftwcall

def tablesixstepfft(*args):
  return _newpresto.tablesixstepfft(*args)
tablesixstepfft = _newpresto.tablesixstepfft

def realfft(*args):
  return _newpresto.realfft(*args)
realfft = _newpresto.realfft
class infodata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, infodata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, infodata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ra_s"] = _newpresto.infodata_ra_s_set
    __swig_getmethods__["ra_s"] = _newpresto.infodata_ra_s_get
    if _newclass:ra_s = _swig_property(_newpresto.infodata_ra_s_get, _newpresto.infodata_ra_s_set)
    __swig_setmethods__["dec_s"] = _newpresto.infodata_dec_s_set
    __swig_getmethods__["dec_s"] = _newpresto.infodata_dec_s_get
    if _newclass:dec_s = _swig_property(_newpresto.infodata_dec_s_get, _newpresto.infodata_dec_s_set)
    __swig_setmethods__["N"] = _newpresto.infodata_N_set
    __swig_getmethods__["N"] = _newpresto.infodata_N_get
    if _newclass:N = _swig_property(_newpresto.infodata_N_get, _newpresto.infodata_N_set)
    __swig_setmethods__["dt"] = _newpresto.infodata_dt_set
    __swig_getmethods__["dt"] = _newpresto.infodata_dt_get
    if _newclass:dt = _swig_property(_newpresto.infodata_dt_get, _newpresto.infodata_dt_set)
    __swig_setmethods__["fov"] = _newpresto.infodata_fov_set
    __swig_getmethods__["fov"] = _newpresto.infodata_fov_get
    if _newclass:fov = _swig_property(_newpresto.infodata_fov_get, _newpresto.infodata_fov_set)
    __swig_setmethods__["mjd_f"] = _newpresto.infodata_mjd_f_set
    __swig_getmethods__["mjd_f"] = _newpresto.infodata_mjd_f_get
    if _newclass:mjd_f = _swig_property(_newpresto.infodata_mjd_f_get, _newpresto.infodata_mjd_f_set)
    __swig_setmethods__["dm"] = _newpresto.infodata_dm_set
    __swig_getmethods__["dm"] = _newpresto.infodata_dm_get
    if _newclass:dm = _swig_property(_newpresto.infodata_dm_get, _newpresto.infodata_dm_set)
    __swig_setmethods__["freq"] = _newpresto.infodata_freq_set
    __swig_getmethods__["freq"] = _newpresto.infodata_freq_get
    if _newclass:freq = _swig_property(_newpresto.infodata_freq_get, _newpresto.infodata_freq_set)
    __swig_setmethods__["freqband"] = _newpresto.infodata_freqband_set
    __swig_getmethods__["freqband"] = _newpresto.infodata_freqband_get
    if _newclass:freqband = _swig_property(_newpresto.infodata_freqband_get, _newpresto.infodata_freqband_set)
    __swig_setmethods__["chan_wid"] = _newpresto.infodata_chan_wid_set
    __swig_getmethods__["chan_wid"] = _newpresto.infodata_chan_wid_get
    if _newclass:chan_wid = _swig_property(_newpresto.infodata_chan_wid_get, _newpresto.infodata_chan_wid_set)
    __swig_setmethods__["wavelen"] = _newpresto.infodata_wavelen_set
    __swig_getmethods__["wavelen"] = _newpresto.infodata_wavelen_get
    if _newclass:wavelen = _swig_property(_newpresto.infodata_wavelen_get, _newpresto.infodata_wavelen_set)
    __swig_setmethods__["waveband"] = _newpresto.infodata_waveband_set
    __swig_getmethods__["waveband"] = _newpresto.infodata_waveband_get
    if _newclass:waveband = _swig_property(_newpresto.infodata_waveband_get, _newpresto.infodata_waveband_set)
    __swig_setmethods__["energy"] = _newpresto.infodata_energy_set
    __swig_getmethods__["energy"] = _newpresto.infodata_energy_get
    if _newclass:energy = _swig_property(_newpresto.infodata_energy_get, _newpresto.infodata_energy_set)
    __swig_setmethods__["energyband"] = _newpresto.infodata_energyband_set
    __swig_getmethods__["energyband"] = _newpresto.infodata_energyband_get
    if _newclass:energyband = _swig_property(_newpresto.infodata_energyband_get, _newpresto.infodata_energyband_set)
    __swig_setmethods__["num_chan"] = _newpresto.infodata_num_chan_set
    __swig_getmethods__["num_chan"] = _newpresto.infodata_num_chan_get
    if _newclass:num_chan = _swig_property(_newpresto.infodata_num_chan_get, _newpresto.infodata_num_chan_set)
    __swig_setmethods__["mjd_i"] = _newpresto.infodata_mjd_i_set
    __swig_getmethods__["mjd_i"] = _newpresto.infodata_mjd_i_get
    if _newclass:mjd_i = _swig_property(_newpresto.infodata_mjd_i_get, _newpresto.infodata_mjd_i_set)
    __swig_setmethods__["ra_h"] = _newpresto.infodata_ra_h_set
    __swig_getmethods__["ra_h"] = _newpresto.infodata_ra_h_get
    if _newclass:ra_h = _swig_property(_newpresto.infodata_ra_h_get, _newpresto.infodata_ra_h_set)
    __swig_setmethods__["ra_m"] = _newpresto.infodata_ra_m_set
    __swig_getmethods__["ra_m"] = _newpresto.infodata_ra_m_get
    if _newclass:ra_m = _swig_property(_newpresto.infodata_ra_m_get, _newpresto.infodata_ra_m_set)
    __swig_setmethods__["dec_d"] = _newpresto.infodata_dec_d_set
    __swig_getmethods__["dec_d"] = _newpresto.infodata_dec_d_get
    if _newclass:dec_d = _swig_property(_newpresto.infodata_dec_d_get, _newpresto.infodata_dec_d_set)
    __swig_setmethods__["dec_m"] = _newpresto.infodata_dec_m_set
    __swig_getmethods__["dec_m"] = _newpresto.infodata_dec_m_get
    if _newclass:dec_m = _swig_property(_newpresto.infodata_dec_m_get, _newpresto.infodata_dec_m_set)
    __swig_setmethods__["bary"] = _newpresto.infodata_bary_set
    __swig_getmethods__["bary"] = _newpresto.infodata_bary_get
    if _newclass:bary = _swig_property(_newpresto.infodata_bary_get, _newpresto.infodata_bary_set)
    __swig_setmethods__["numonoff"] = _newpresto.infodata_numonoff_set
    __swig_getmethods__["numonoff"] = _newpresto.infodata_numonoff_get
    if _newclass:numonoff = _swig_property(_newpresto.infodata_numonoff_get, _newpresto.infodata_numonoff_set)
    __swig_setmethods__["notes"] = _newpresto.infodata_notes_set
    __swig_getmethods__["notes"] = _newpresto.infodata_notes_get
    if _newclass:notes = _swig_property(_newpresto.infodata_notes_get, _newpresto.infodata_notes_set)
    __swig_setmethods__["name"] = _newpresto.infodata_name_set
    __swig_getmethods__["name"] = _newpresto.infodata_name_get
    if _newclass:name = _swig_property(_newpresto.infodata_name_get, _newpresto.infodata_name_set)
    __swig_setmethods__["object"] = _newpresto.infodata_object_set
    __swig_getmethods__["object"] = _newpresto.infodata_object_get
    if _newclass:object = _swig_property(_newpresto.infodata_object_get, _newpresto.infodata_object_set)
    __swig_setmethods__["instrument"] = _newpresto.infodata_instrument_set
    __swig_getmethods__["instrument"] = _newpresto.infodata_instrument_get
    if _newclass:instrument = _swig_property(_newpresto.infodata_instrument_get, _newpresto.infodata_instrument_set)
    __swig_setmethods__["observer"] = _newpresto.infodata_observer_set
    __swig_getmethods__["observer"] = _newpresto.infodata_observer_get
    if _newclass:observer = _swig_property(_newpresto.infodata_observer_get, _newpresto.infodata_observer_set)
    __swig_setmethods__["analyzer"] = _newpresto.infodata_analyzer_set
    __swig_getmethods__["analyzer"] = _newpresto.infodata_analyzer_get
    if _newclass:analyzer = _swig_property(_newpresto.infodata_analyzer_get, _newpresto.infodata_analyzer_set)
    __swig_setmethods__["telescope"] = _newpresto.infodata_telescope_set
    __swig_getmethods__["telescope"] = _newpresto.infodata_telescope_get
    if _newclass:telescope = _swig_property(_newpresto.infodata_telescope_get, _newpresto.infodata_telescope_set)
    __swig_setmethods__["band"] = _newpresto.infodata_band_set
    __swig_getmethods__["band"] = _newpresto.infodata_band_get
    if _newclass:band = _swig_property(_newpresto.infodata_band_get, _newpresto.infodata_band_set)
    __swig_setmethods__["filt"] = _newpresto.infodata_filt_set
    __swig_getmethods__["filt"] = _newpresto.infodata_filt_get
    if _newclass:filt = _swig_property(_newpresto.infodata_filt_get, _newpresto.infodata_filt_set)
    def __init__(self): 
        this = _newpresto.new_infodata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _newpresto.delete_infodata
    __del__ = lambda self : None;
infodata_swigregister = _newpresto.infodata_swigregister
infodata_swigregister(infodata)


def readinf(*args):
  return _newpresto.readinf(*args)
readinf = _newpresto.readinf

def writeinf(*args):
  return _newpresto.writeinf(*args)
writeinf = _newpresto.writeinf

def gen_fvect(*args):
  return _newpresto.gen_fvect(*args)
gen_fvect = _newpresto.gen_fvect

def gen_cvect(*args):
  return _newpresto.gen_cvect(*args)
gen_cvect = _newpresto.gen_cvect
# This file is compatible with both classic and new-style classes.


